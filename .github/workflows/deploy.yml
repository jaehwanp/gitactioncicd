name: CI/CD Pipeline

on:
  push:
    branches: [main]

env:
  AWS_REGION: ap-northeast-2
  AWS_ACCOUNT_ID: 593710896253
  ECR_REPOSITORY: gitactioncicd
  ECS_CLUSTER: git-actions-ecs
  ECS_SERVICE: git-action-task-service-dum2ap9c
  CONTAINER_NAME: git-action-container
  IMAGE_TAG: ${{ github.sha }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm test

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and Push Docker Image
        run: |
          docker build -t $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Render taskdef with new image
        run: |
          sed -i "s|<ACCOUNT_ID>|$AWS_ACCOUNT_ID|g" taskdef.json
          sed -i "s|<ECR_REPOSITORY>|$ECR_REPOSITORY|g" taskdef.json
          sed -i "s|<IMAGE_TAG>|$IMAGE_TAG|g" taskdef.json

      - name: Register new task definition
        id: register
        run: |
          TD_ARN=$(aws ecs register-task-definition --cli-input-json file://taskdef.json --query 'taskDefinition.taskDefinitionArn' --output text)
          echo "TD_ARN=$TD_ARN" >> $GITHUB_OUTPUT

      - name: Update ECS service
        run: |
          aws ecs update-service \
            --cluster "$ECS_CLUSTER" \
            --service "$ECS_SERVICE" \
            --task-definition "${{ steps.register.outputs.TD_ARN }}"

      - name: Wait for service stable
        run: |
          aws ecs wait services-stable --cluster "$ECS_CLUSTER" --services "$ECS_SERVICE"
